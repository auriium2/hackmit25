{"ast":null,"code":"var _jsxFileName = \"/Users/arjuncaputo/hackmit25/frontend/src/components/Graph/GraphVisualization.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport cytoscape from \"cytoscape\";\nimport fcose from \"cytoscape-fcose\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncytoscape.use(fcose);\nconst GraphVisualization = ({\n  nodes,\n  edges,\n  onNodeSelect,\n  onNodeHover\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const cyInstance = useRef(null);\n  const [hoveredNode, setHoveredNode] = useState(null);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n\n  // Red gradient colors for relatedness (dark to light)\n  const relatednessColors = [\"#8B0000\",\n  // Dark red (distance 0 - selected paper)\n  \"#B22222\",\n  // Fire brick (distance 1)\n  \"#DC143C\",\n  // Crimson (distance 2)\n  \"#FF6347\",\n  // Tomato (distance 3)\n  \"#FF7F7F\",\n  // Light coral (distance 4)\n  \"#FFB6C1\" // Light pink (distance 5+)\n  ];\n  const clusterColors = {\n    \"NLP\": \"#4A90E2\",\n    \"Computer Vision\": \"#7CB342\",\n    \"Machine Learning\": \"#FB8C00\",\n    \"Default\": \"#666666\"\n  };\n  const getNodeColor = (cluster, distance) => {\n    // If we have a selected node, use relatedness colors\n    if (selectedNodeId && distance !== undefined) {\n      const colorIndex = Math.min(distance, relatednessColors.length - 1);\n      return relatednessColors[colorIndex];\n    }\n\n    // Otherwise use cluster colors\n    return cluster ? clusterColors[cluster] || clusterColors[\"Default\"] : clusterColors[\"Default\"];\n  };\n\n  // Calculate shortest path distances from selected node\n  const calculateDistances = selectedId => {\n    if (!cyInstance.current) return new Map();\n    const distances = new Map();\n    const visited = new Set();\n    const queue = [{\n      nodeId: selectedId,\n      distance: 0\n    }];\n    distances.set(selectedId, 0);\n    while (queue.length > 0) {\n      const {\n        nodeId,\n        distance\n      } = queue.shift();\n      if (visited.has(nodeId)) continue;\n      visited.add(nodeId);\n\n      // Find connected nodes\n      const node = cyInstance.current.getElementById(nodeId);\n      const connectedEdges = node.connectedEdges();\n      connectedEdges.forEach(edge => {\n        const connectedNode = edge.otherNode(node);\n        const connectedId = connectedNode.id();\n        if (!distances.has(connectedId) || distances.get(connectedId) > distance + 1) {\n          distances.set(connectedId, distance + 1);\n          queue.push({\n            nodeId: connectedId,\n            distance: distance + 1\n          });\n        }\n      });\n    }\n    return distances;\n  };\n  useEffect(() => {\n    if (!cyRef.current) return;\n\n    // Clean up existing instance\n    if (cyInstance.current) {\n      cyInstance.current.destroy();\n    }\n    cyInstance.current = cytoscape({\n      container: cyRef.current,\n      elements: [...nodes.map(node => ({\n        data: {\n          id: node.id,\n          title: node.data.title,\n          year: node.data.year,\n          cluster: node.data.cluster,\n          confidence: node.data.confidence\n        }\n      })), ...edges.map(edge => ({\n        data: {\n          id: edge.id,\n          source: edge.source,\n          target: edge.target,\n          type: edge.type\n        }\n      }))],\n      style: [{\n        selector: \"node\",\n        style: {\n          \"background-color\": ele => getNodeColor(ele.data(\"cluster\")),\n          \"border-color\": \"#fff\",\n          \"border-width\": 2,\n          label: \"data(year)\",\n          \"text-valign\": \"center\",\n          \"text-halign\": \"center\",\n          width: 60,\n          height: 60,\n          \"font-size\": \"12px\",\n          \"font-weight\": 600,\n          color: \"white\"\n        }\n      }, {\n        selector: \"node:hover\",\n        style: {\n          \"border-width\": 3,\n          \"border-color\": \"#FFD700\"\n        }\n      }, {\n        selector: \"edge[type = \\\"citation\\\"]\",\n        style: {\n          \"line-color\": \"#888\",\n          \"target-arrow-color\": \"#888\",\n          \"target-arrow-shape\": \"triangle\",\n          width: 2\n        }\n      }, {\n        selector: \"edge[type = \\\"beats\\\"]\",\n        style: {\n          \"line-color\": \"#E74C3C\",\n          \"target-arrow-color\": \"#E74C3C\",\n          \"target-arrow-shape\": \"triangle\",\n          width: 3,\n          \"line-style\": \"dashed\"\n        }\n      }],\n      layout: {\n        name: \"cose\",\n        animate: true,\n        animationDuration: 1000,\n        fit: true,\n        padding: 50\n      },\n      minZoom: 0.3,\n      maxZoom: 3,\n      userPanningEnabled: true,\n      userZoomingEnabled: true\n    });\n\n    // Wait for layout to complete before setting up events\n    cyInstance.current.ready(() => {\n      setIsReady(true);\n    });\n\n    // Node selection\n    cyInstance.current.on(\"tap\", \"node\", evt => {\n      var _cyInstance$current;\n      const nodeId = evt.target.id();\n      setSelectedNodeId(nodeId);\n\n      // Calculate distances and update node colors\n      const distances = calculateDistances(nodeId);\n\n      // Update all node colors based on relatedness\n      (_cyInstance$current = cyInstance.current) === null || _cyInstance$current === void 0 ? void 0 : _cyInstance$current.nodes().forEach(node => {\n        var _distances$get;\n        const id = node.id();\n        const distance = (_distances$get = distances.get(id)) !== null && _distances$get !== void 0 ? _distances$get : 999;\n        const newColor = getNodeColor(node.data(\"cluster\"), distance);\n        node.style(\"background-color\", newColor);\n      });\n      onNodeSelect(nodeId);\n    });\n\n    // Reset colors when clicking background\n    cyInstance.current.on(\"tap\", evt => {\n      // Only reset if clicking on background (not on a node)\n      if (evt.target === cyInstance.current) {\n        var _cyInstance$current2;\n        setSelectedNodeId(null);\n\n        // Reset all node colors to cluster colors\n        (_cyInstance$current2 = cyInstance.current) === null || _cyInstance$current2 === void 0 ? void 0 : _cyInstance$current2.nodes().forEach(node => {\n          const originalColor = getNodeColor(node.data(\"cluster\"));\n          node.style(\"background-color\", originalColor);\n        });\n      }\n    });\n\n    // Simple hover handling without positioning issues\n    cyInstance.current.on(\"mouseover\", \"node\", evt => {\n      if (isReady) {\n        const nodeId = evt.target.id();\n        setHoveredNode(nodeId);\n        onNodeHover(nodeId);\n      }\n    });\n    cyInstance.current.on(\"mouseout\", \"node\", () => {\n      if (isReady) {\n        setHoveredNode(null);\n        onNodeHover(null);\n      }\n    });\n    return () => {\n      if (cyInstance.current) {\n        cyInstance.current.destroy();\n        cyInstance.current = null;\n      }\n      setIsReady(false);\n    };\n  }, [nodes, edges, onNodeSelect, onNodeHover, selectedNodeId]);\n\n  // Get hovered node data for tooltip\n  const hoveredNodeData = hoveredNode ? nodes.find(n => n.id === hoveredNode) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: cyRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        border: \"1px solid #e0e0e0\",\n        borderRadius: \"12px\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"grab\",\n        overflow: \"hidden\",\n        boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.1)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), hoveredNodeData && isReady && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"20px\",\n        right: \"20px\",\n        background: \"rgba(0, 0, 0, 0.9)\",\n        color: \"white\",\n        padding: \"12px 16px\",\n        borderRadius: \"8px\",\n        fontSize: \"14px\",\n        maxWidth: \"300px\",\n        boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.3)\",\n        zIndex: 1000,\n        pointerEvents: \"none\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontWeight: 600,\n          color: \"#FFD700\",\n          marginBottom: \"8px\"\n        },\n        children: hoveredNodeData.data.title.length > 50 ? hoveredNodeData.data.title.substring(0, 50) + \"...\" : hoveredNodeData.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"4px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), \" \", hoveredNodeData.data.year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"4px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Topic:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), \" \", hoveredNodeData.data.cluster || \"Unknown\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Confidence:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), \" \", hoveredNodeData.data.confidence, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"MKcQchxou00CqoX8tfqTY8HWzFs=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","cytoscape","fcose","jsxDEV","_jsxDEV","use","GraphVisualization","nodes","edges","onNodeSelect","onNodeHover","_s","cyRef","cyInstance","hoveredNode","setHoveredNode","selectedNodeId","setSelectedNodeId","isReady","setIsReady","relatednessColors","clusterColors","getNodeColor","cluster","distance","undefined","colorIndex","Math","min","length","calculateDistances","selectedId","current","Map","distances","visited","Set","queue","nodeId","set","shift","has","add","node","getElementById","connectedEdges","forEach","edge","connectedNode","otherNode","connectedId","id","get","push","destroy","container","elements","map","data","title","year","confidence","source","target","type","style","selector","ele","label","width","height","color","layout","name","animate","animationDuration","fit","padding","minZoom","maxZoom","userPanningEnabled","userZoomingEnabled","ready","on","evt","_cyInstance$current","_distances$get","newColor","_cyInstance$current2","originalColor","hoveredNodeData","find","n","position","children","ref","border","borderRadius","backgroundColor","cursor","overflow","boxShadow","fileName","_jsxFileName","lineNumber","columnNumber","top","right","background","fontSize","maxWidth","zIndex","pointerEvents","fontWeight","marginBottom","substring","_c","$RefreshReg$"],"sources":["/Users/arjuncaputo/hackmit25/frontend/src/components/Graph/GraphVisualization.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport cytoscape from \"cytoscape\";\nimport fcose from \"cytoscape-fcose\";\nimport { GraphNode, GraphEdge } from \"../../types\";\n\ncytoscape.use(fcose);\n\ninterface GraphVisualizationProps {\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n  onNodeSelect: (nodeId: string) => void;\n  onNodeHover: (nodeId: string | null) => void;\n}\n\nconst GraphVisualization: React.FC<GraphVisualizationProps> = ({\n  nodes,\n  edges,\n  onNodeSelect,\n  onNodeHover,\n}) => {\n  const cyRef = useRef<HTMLDivElement>(null);\n  const cyInstance = useRef<cytoscape.Core | null>(null);\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null);\n  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);\n  const [isReady, setIsReady] = useState(false);\n\n  // Red gradient colors for relatedness (dark to light)\n  const relatednessColors = [\n    \"#8B0000\", // Dark red (distance 0 - selected paper)\n    \"#B22222\", // Fire brick (distance 1)\n    \"#DC143C\", // Crimson (distance 2)\n    \"#FF6347\", // Tomato (distance 3)\n    \"#FF7F7F\", // Light coral (distance 4)\n    \"#FFB6C1\", // Light pink (distance 5+)\n  ];\n\n  const clusterColors: Record<string, string> = {\n    \"NLP\": \"#4A90E2\",\n    \"Computer Vision\": \"#7CB342\",\n    \"Machine Learning\": \"#FB8C00\", \n    \"Default\": \"#666666\",\n  };\n\n  const getNodeColor = (cluster?: string, distance?: number) => {\n    // If we have a selected node, use relatedness colors\n    if (selectedNodeId && distance !== undefined) {\n      const colorIndex = Math.min(distance, relatednessColors.length - 1);\n      return relatednessColors[colorIndex];\n    }\n    \n    // Otherwise use cluster colors\n    return cluster ? clusterColors[cluster] || clusterColors[\"Default\"] : clusterColors[\"Default\"];\n  };\n\n  // Calculate shortest path distances from selected node\n  const calculateDistances = (selectedId: string) => {\n    if (!cyInstance.current) return new Map();\n    \n    const distances = new Map<string, number>();\n    const visited = new Set<string>();\n    const queue = [{ nodeId: selectedId, distance: 0 }];\n    \n    distances.set(selectedId, 0);\n    \n    while (queue.length > 0) {\n      const { nodeId, distance } = queue.shift()!;\n      \n      if (visited.has(nodeId)) continue;\n      visited.add(nodeId);\n      \n      // Find connected nodes\n      const node = cyInstance.current.getElementById(nodeId);\n      const connectedEdges = node.connectedEdges();\n      \n      connectedEdges.forEach((edge: any) => {\n        const connectedNode = edge.otherNode(node);\n        const connectedId = connectedNode.id();\n        \n        if (!distances.has(connectedId) || distances.get(connectedId)! > distance + 1) {\n          distances.set(connectedId, distance + 1);\n          queue.push({ nodeId: connectedId, distance: distance + 1 });\n        }\n      });\n    }\n    \n    return distances;\n  };\n\n  useEffect(() => {\n    if (!cyRef.current) return;\n\n    // Clean up existing instance\n    if (cyInstance.current) {\n      cyInstance.current.destroy();\n    }\n\n    cyInstance.current = cytoscape({\n      container: cyRef.current,\n      elements: [\n        ...nodes.map(node => ({\n          data: {\n            id: node.id,\n            title: node.data.title,\n            year: node.data.year,\n            cluster: node.data.cluster,\n            confidence: node.data.confidence,\n          },\n        })),\n        ...edges.map(edge => ({\n          data: {\n            id: edge.id,\n            source: edge.source,\n            target: edge.target,\n            type: edge.type,\n          },\n        })),\n      ],\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            \"background-color\": (ele: any) => getNodeColor(ele.data(\"cluster\")),\n            \"border-color\": \"#fff\",\n            \"border-width\": 2,\n            label: \"data(year)\",\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            width: 60,\n            height: 60,\n            \"font-size\": \"12px\",\n            \"font-weight\": 600,\n            color: \"white\",\n          },\n        },\n        {\n          selector: \"node:hover\",\n          style: {\n            \"border-width\": 3,\n            \"border-color\": \"#FFD700\",\n          },\n        },\n        {\n          selector: \"edge[type = \\\"citation\\\"]\",\n          style: {\n            \"line-color\": \"#888\",\n            \"target-arrow-color\": \"#888\",\n            \"target-arrow-shape\": \"triangle\",\n            width: 2,\n          },\n        },\n        {\n          selector: \"edge[type = \\\"beats\\\"]\",\n          style: {\n            \"line-color\": \"#E74C3C\",\n            \"target-arrow-color\": \"#E74C3C\",\n            \"target-arrow-shape\": \"triangle\",\n            width: 3,\n            \"line-style\": \"dashed\",\n          },\n        },\n      ],\n      layout: {\n        name: \"cose\" as const,\n        animate: true,\n        animationDuration: 1000,\n        fit: true,\n        padding: 50,\n      },\n      minZoom: 0.3,\n      maxZoom: 3,\n      userPanningEnabled: true,\n      userZoomingEnabled: true,\n    });\n\n    // Wait for layout to complete before setting up events\n    cyInstance.current.ready(() => {\n      setIsReady(true);\n    });\n\n    // Node selection\n    cyInstance.current.on(\"tap\", \"node\", (evt) => {\n      const nodeId = evt.target.id();\n      setSelectedNodeId(nodeId);\n      \n      // Calculate distances and update node colors\n      const distances = calculateDistances(nodeId);\n      \n      // Update all node colors based on relatedness\n      cyInstance.current?.nodes().forEach((node: any) => {\n        const id = node.id();\n        const distance = distances.get(id) ?? 999;\n        const newColor = getNodeColor(node.data(\"cluster\"), distance);\n        node.style(\"background-color\", newColor);\n      });\n      \n      onNodeSelect(nodeId);\n    });\n\n    // Reset colors when clicking background\n    cyInstance.current.on(\"tap\", (evt) => {\n      // Only reset if clicking on background (not on a node)\n      if (evt.target === cyInstance.current) {\n        setSelectedNodeId(null);\n        \n        // Reset all node colors to cluster colors\n        cyInstance.current?.nodes().forEach((node: any) => {\n          const originalColor = getNodeColor(node.data(\"cluster\"));\n          node.style(\"background-color\", originalColor);\n        });\n      }\n    });\n\n    // Simple hover handling without positioning issues\n    cyInstance.current.on(\"mouseover\", \"node\", (evt) => {\n      if (isReady) {\n        const nodeId = evt.target.id();\n        setHoveredNode(nodeId);\n        onNodeHover(nodeId);\n      }\n    });\n\n    cyInstance.current.on(\"mouseout\", \"node\", () => {\n      if (isReady) {\n        setHoveredNode(null);\n        onNodeHover(null);\n      }\n    });\n\n    return () => {\n      if (cyInstance.current) {\n        cyInstance.current.destroy();\n        cyInstance.current = null;\n      }\n      setIsReady(false);\n    };\n  }, [nodes, edges, onNodeSelect, onNodeHover, selectedNodeId]);\n\n  // Get hovered node data for tooltip\n  const hoveredNodeData = hoveredNode ? nodes.find(n => n.id === hoveredNode) : null;\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n      <div\n        ref={cyRef}\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          border: \"1px solid #e0e0e0\",\n          borderRadius: \"12px\",\n          backgroundColor: \"#fafafa\",\n          cursor: \"grab\",\n          overflow: \"hidden\",\n          boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.1)\",\n        }}\n      />\n      {/* Simple CSS-based tooltip */}\n      {hoveredNodeData && isReady && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: \"20px\",\n            right: \"20px\",\n            background: \"rgba(0, 0, 0, 0.9)\",\n            color: \"white\",\n            padding: \"12px 16px\",\n            borderRadius: \"8px\",\n            fontSize: \"14px\",\n            maxWidth: \"300px\",\n            boxShadow: \"0 4px 20px rgba(0, 0, 0, 0.3)\",\n            zIndex: 1000,\n            pointerEvents: \"none\",\n          }}\n        >\n          <div style={{ fontWeight: 600, color: \"#FFD700\", marginBottom: \"8px\" }}>\n            {hoveredNodeData.data.title.length > 50 \n              ? hoveredNodeData.data.title.substring(0, 50) + \"...\" \n              : hoveredNodeData.data.title}\n          </div>\n          <div style={{ marginBottom: \"4px\" }}>\n            <strong>Year:</strong> {hoveredNodeData.data.year}\n          </div>\n          <div style={{ marginBottom: \"4px\" }}>\n            <strong>Topic:</strong> {hoveredNodeData.data.cluster || \"Unknown\"}\n          </div>\n          <div>\n            <strong>Confidence:</strong> {hoveredNodeData.data.confidence}%\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GraphVisualization;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}