{"ast":null,"code":"import React,{useEffect,useRef,useState}from\"react\";import cytoscape from\"cytoscape\";import fcose from\"cytoscape-fcose\";import{jsx as _jsx}from\"react/jsx-runtime\";cytoscape.use(fcose);const GraphVisualization=_ref=>{let{nodes,edges,onNodeSelect,onNodeHover}=_ref;const cyRef=useRef(null);const cyInstance=useRef(null);const tooltipRef=useRef(null);const[selectedNodeId,setSelectedNodeId]=useState(null);// Red gradient colors for relatedness (dark to light)\nconst relatednessColors=[\"#8B0000\",// Dark red (distance 0 - selected paper)\n\"#B22222\",// Fire brick (distance 1)\n\"#DC143C\",// Crimson (distance 2)\n\"#FF6347\",// Tomato (distance 3)\n\"#FF7F7F\",// Light coral (distance 4)\n\"#FFB6C1\"// Light pink (distance 5+)\n];const clusterColors={\"NLP\":\"#4A90E2\",\"Computer Vision\":\"#7CB342\",\"Machine Learning\":\"#FB8C00\",\"Default\":\"#666666\"};const getNodeColor=(cluster,distance)=>{// If we have a selected node, use relatedness colors\nif(selectedNodeId&&distance!==undefined){const colorIndex=Math.min(distance,relatednessColors.length-1);return relatednessColors[colorIndex];}// Otherwise use cluster colors\nreturn cluster?clusterColors[cluster]||clusterColors[\"Default\"]:clusterColors[\"Default\"];};// Calculate shortest path distances from selected node\nconst calculateDistances=selectedId=>{if(!cyInstance.current)return new Map();const distances=new Map();const visited=new Set();const queue=[{nodeId:selectedId,distance:0}];distances.set(selectedId,0);while(queue.length>0){const{nodeId,distance}=queue.shift();if(visited.has(nodeId))continue;visited.add(nodeId);// Find connected nodes\nconst node=cyInstance.current.getElementById(nodeId);const connectedEdges=node.connectedEdges();connectedEdges.forEach(edge=>{const connectedNode=edge.otherNode(node);const connectedId=connectedNode.id();if(!distances.has(connectedId)||distances.get(connectedId)>distance+1){distances.set(connectedId,distance+1);queue.push({nodeId:connectedId,distance:distance+1});}});}return distances;};useEffect(()=>{if(!cyRef.current)return;cyInstance.current=cytoscape({container:cyRef.current,elements:[...nodes.map(node=>({data:{id:node.id,title:node.data.title,year:node.data.year,cluster:node.data.cluster,confidence:node.data.confidence}})),...edges.map(edge=>({data:{id:edge.id,source:edge.source,target:edge.target,type:edge.type}}))],style:[{selector:\"node\",style:{\"background-color\":ele=>getNodeColor(ele.data(\"cluster\")),\"border-color\":\"#fff\",\"border-width\":2,label:\"data(year)\",\"text-valign\":\"center\",\"text-halign\":\"center\",width:60,height:60,\"font-size\":\"12px\",\"font-weight\":600,color:\"white\"}},{selector:\"node:hover\",style:{\"border-width\":3,\"border-color\":\"#FFD700\"}},{selector:\"edge[type = \\\"citation\\\"]\",style:{\"line-color\":\"#888\",\"target-arrow-color\":\"#888\",\"target-arrow-shape\":\"triangle\",width:2}},{selector:\"edge[type = \\\"beats\\\"]\",style:{\"line-color\":\"#E74C3C\",\"target-arrow-color\":\"#E74C3C\",\"target-arrow-shape\":\"triangle\",width:3,\"line-style\":\"dashed\"}}],layout:{name:\"cose\",animate:true,animationDuration:1000,fit:true,padding:50},minZoom:0.3,maxZoom:3,userPanningEnabled:true,userZoomingEnabled:true});cyInstance.current.on(\"tap\",\"node\",evt=>{var _cyInstance$current,_cyInstance$current2;const nodeId=evt.target.id();setSelectedNodeId(nodeId);// Calculate distances and update node colors\nconst distances=calculateDistances(nodeId);// Update all node colors based on relatedness\n(_cyInstance$current=cyInstance.current)===null||_cyInstance$current===void 0?void 0:_cyInstance$current.nodes().forEach(node=>{var _distances$get;const id=node.id();const distance=(_distances$get=distances.get(id))!==null&&_distances$get!==void 0?_distances$get:999;const newColor=getNodeColor(node.data(\"cluster\"),distance);node.style(\"background-color\",newColor);});onNodeSelect(nodeId);// Reset colors when clicking background\n(_cyInstance$current2=cyInstance.current)===null||_cyInstance$current2===void 0?void 0:_cyInstance$current2.on(\"tap\",evt=>{// Only reset if clicking on background (not on a node)\nif(evt.target===cyInstance.current){var _cyInstance$current3;setSelectedNodeId(null);// Reset all node colors to cluster colors\n(_cyInstance$current3=cyInstance.current)===null||_cyInstance$current3===void 0?void 0:_cyInstance$current3.nodes().forEach(node=>{const originalColor=getNodeColor(node.data(\"cluster\"));node.style(\"background-color\",originalColor);});}});});// Create tooltip\nif(!tooltipRef.current){tooltipRef.current=document.createElement(\"div\");tooltipRef.current.style.position=\"absolute\";tooltipRef.current.style.zIndex=\"1000\";tooltipRef.current.style.background=\"rgba(0, 0, 0, 0.9)\";tooltipRef.current.style.color=\"white\";tooltipRef.current.style.padding=\"12px 16px\";tooltipRef.current.style.borderRadius=\"8px\";tooltipRef.current.style.fontSize=\"14px\";tooltipRef.current.style.pointerEvents=\"none\";tooltipRef.current.style.maxWidth=\"300px\";tooltipRef.current.style.boxShadow=\"0 4px 20px rgba(0, 0, 0, 0.3)\";tooltipRef.current.style.opacity=\"0\";tooltipRef.current.style.transition=\"opacity 0.2s ease\";document.body.appendChild(tooltipRef.current);}cyInstance.current.on(\"mouseover\",\"node\",evt=>{const node=evt.target;const data=node.data();if(tooltipRef.current){var _cyRef$current;const shortTitle=data.title.length>50?data.title.substring(0,50)+\"...\":data.title;tooltipRef.current.innerHTML=\"<div style='font-weight: 600; color: #FFD700; margin-bottom: 8px;'>\"+shortTitle+\"</div>\"+\"<div style='margin-bottom: 4px;'><strong>Year:</strong> \"+data.year+\"</div>\"+\"<div style='margin-bottom: 4px;'><strong>Topic:</strong> \"+(data.cluster||\"Unknown\")+\"</div>\"+\"<div><strong>Confidence:</strong> \"+data.confidence+\"%</div>\";const pos=node.renderedPosition();const container=(_cyRef$current=cyRef.current)===null||_cyRef$current===void 0?void 0:_cyRef$current.getBoundingClientRect();if(container){tooltipRef.current.style.left=container.left+pos.x+25+\"px\";tooltipRef.current.style.top=container.top+pos.y-30+\"px\";tooltipRef.current.style.opacity=\"1\";}}onNodeHover(evt.target.id());});cyInstance.current.on(\"mouseout\",\"node\",()=>{if(tooltipRef.current){tooltipRef.current.style.opacity=\"0\";}onNodeHover(null);});return()=>{if(cyInstance.current){cyInstance.current.destroy();}if(tooltipRef.current&&document.body.contains(tooltipRef.current)){document.body.removeChild(tooltipRef.current);tooltipRef.current=null;}};},[nodes,edges,onNodeSelect,onNodeHover]);return/*#__PURE__*/_jsx(\"div\",{ref:cyRef,style:{width:\"100%\",height:\"100%\",border:\"1px solid #e0e0e0\",borderRadius:\"12px\",backgroundColor:\"#fafafa\",cursor:\"grab\",overflow:\"hidden\",boxShadow:\"0 4px 12px rgba(0, 0, 0, 0.1)\"}});};export default GraphVisualization;","map":{"version":3,"names":["React","useEffect","useRef","useState","cytoscape","fcose","jsx","_jsx","use","GraphVisualization","_ref","nodes","edges","onNodeSelect","onNodeHover","cyRef","cyInstance","tooltipRef","selectedNodeId","setSelectedNodeId","relatednessColors","clusterColors","getNodeColor","cluster","distance","undefined","colorIndex","Math","min","length","calculateDistances","selectedId","current","Map","distances","visited","Set","queue","nodeId","set","shift","has","add","node","getElementById","connectedEdges","forEach","edge","connectedNode","otherNode","connectedId","id","get","push","container","elements","map","data","title","year","confidence","source","target","type","style","selector","ele","label","width","height","color","layout","name","animate","animationDuration","fit","padding","minZoom","maxZoom","userPanningEnabled","userZoomingEnabled","on","evt","_cyInstance$current","_cyInstance$current2","_distances$get","newColor","_cyInstance$current3","originalColor","document","createElement","position","zIndex","background","borderRadius","fontSize","pointerEvents","maxWidth","boxShadow","opacity","transition","body","appendChild","_cyRef$current","shortTitle","substring","innerHTML","pos","renderedPosition","getBoundingClientRect","left","x","top","y","destroy","contains","removeChild","ref","border","backgroundColor","cursor","overflow"],"sources":["/Users/arjuncaputo/hackmit25/frontend/src/components/Graph/GraphVisualization.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport cytoscape from \"cytoscape\";\nimport fcose from \"cytoscape-fcose\";\nimport { GraphNode, GraphEdge } from \"../../types\";\n\ncytoscape.use(fcose);\n\ninterface GraphVisualizationProps {\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n  onNodeSelect: (nodeId: string) => void;\n  onNodeHover: (nodeId: string | null) => void;\n}\n\nconst GraphVisualization: React.FC<GraphVisualizationProps> = ({\n  nodes,\n  edges,\n  onNodeSelect,\n  onNodeHover,\n}) => {\n  const cyRef = useRef<HTMLDivElement>(null);\n  const cyInstance = useRef<cytoscape.Core | null>(null);\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);\n  // Red gradient colors for relatedness (dark to light)\n  const relatednessColors = [\n    \"#8B0000\", // Dark red (distance 0 - selected paper)\n    \"#B22222\", // Fire brick (distance 1)\n    \"#DC143C\", // Crimson (distance 2)\n    \"#FF6347\", // Tomato (distance 3)\n    \"#FF7F7F\", // Light coral (distance 4)\n    \"#FFB6C1\", // Light pink (distance 5+)\n  ];\n  const clusterColors: Record<string, string> = {\n    \"NLP\": \"#4A90E2\",\n    \"Computer Vision\": \"#7CB342\",\n    \"Machine Learning\": \"#FB8C00\", \n    \"Default\": \"#666666\",\n  };\n\n  const getNodeColor = (cluster?: string, distance?: number) => {\n    // If we have a selected node, use relatedness colors\n    if (selectedNodeId && distance !== undefined) {\n      const colorIndex = Math.min(distance, relatednessColors.length - 1);\n      return relatednessColors[colorIndex];\n    }\n    \n    // Otherwise use cluster colors\n    return cluster ? clusterColors[cluster] || clusterColors[\"Default\"] : clusterColors[\"Default\"];\n  };\n\n  // Calculate shortest path distances from selected node\n  const calculateDistances = (selectedId: string) => {\n    if (!cyInstance.current) return new Map();\n    \n    const distances = new Map<string, number>();\n    const visited = new Set<string>();\n    const queue = [{ nodeId: selectedId, distance: 0 }];\n    \n    distances.set(selectedId, 0);\n    \n    while (queue.length > 0) {\n      const { nodeId, distance } = queue.shift()!;\n      \n      if (visited.has(nodeId)) continue;\n      visited.add(nodeId);\n      \n      // Find connected nodes\n      const node = cyInstance.current.getElementById(nodeId);\n      const connectedEdges = node.connectedEdges();\n      \n      connectedEdges.forEach((edge: any) => {\n        const connectedNode = edge.otherNode(node);\n        const connectedId = connectedNode.id();\n        \n        if (!distances.has(connectedId) || distances.get(connectedId)! > distance + 1) {\n          distances.set(connectedId, distance + 1);\n          queue.push({ nodeId: connectedId, distance: distance + 1 });\n        }\n      });\n    }\n    \n    return distances;\n  };\n  useEffect(() => {\n    if (!cyRef.current) return;\n\n    cyInstance.current = cytoscape({\n      container: cyRef.current,\n      elements: [\n        ...nodes.map(node => ({\n          data: {\n            id: node.id,\n            title: node.data.title,\n            year: node.data.year,\n            cluster: node.data.cluster,\n            confidence: node.data.confidence,\n          },\n        })),\n        ...edges.map(edge => ({\n          data: {\n            id: edge.id,\n            source: edge.source,\n            target: edge.target,\n            type: edge.type,\n          },\n        })),\n      ],\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            \"background-color\": (ele: any) => getNodeColor(ele.data(\"cluster\")),\n            \"border-color\": \"#fff\",\n            \"border-width\": 2,\n            label: \"data(year)\",\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            width: 60,\n            height: 60,\n            \"font-size\": \"12px\",\n            \"font-weight\": 600,\n            color: \"white\",\n          },\n        },\n        {\n          selector: \"node:hover\",\n          style: {\n            \"border-width\": 3,\n            \"border-color\": \"#FFD700\",\n          },\n        },\n        {\n          selector: \"edge[type = \\\"citation\\\"]\",\n          style: {\n            \"line-color\": \"#888\",\n            \"target-arrow-color\": \"#888\",\n            \"target-arrow-shape\": \"triangle\",\n            width: 2,\n          },\n        },\n        {\n          selector: \"edge[type = \\\"beats\\\"]\",\n          style: {\n            \"line-color\": \"#E74C3C\",\n            \"target-arrow-color\": \"#E74C3C\",\n            \"target-arrow-shape\": \"triangle\",\n            width: 3,\n            \"line-style\": \"dashed\",\n          },\n        },\n      ],\n      layout: {\n        name: \"cose\" as const,\n        animate: true,\n        animationDuration: 1000,\n        fit: true,\n        padding: 50,\n      },\n      minZoom: 0.3,\n      maxZoom: 3,\n      userPanningEnabled: true,\n      userZoomingEnabled: true,\n    });\n\n    cyInstance.current.on(\"tap\", \"node\", (evt) => {\n      const nodeId = evt.target.id();\n      setSelectedNodeId(nodeId);\n      \n      // Calculate distances and update node colors\n      const distances = calculateDistances(nodeId);\n      \n      // Update all node colors based on relatedness\n      cyInstance.current?.nodes().forEach((node: any) => {\n        const id = node.id();\n        const distance = distances.get(id) ?? 999;\n        const newColor = getNodeColor(node.data(\"cluster\"), distance);\n        node.style(\"background-color\", newColor);\n      });\n      \n      onNodeSelect(nodeId);\n\n    // Reset colors when clicking background\n    cyInstance.current?.on(\"tap\", (evt) => {\n      // Only reset if clicking on background (not on a node)\n      if (evt.target === cyInstance.current) {\n        setSelectedNodeId(null);\n        \n        // Reset all node colors to cluster colors\n        cyInstance.current?.nodes().forEach((node: any) => {\n          const originalColor = getNodeColor(node.data(\"cluster\"));\n          node.style(\"background-color\", originalColor);\n        });\n      }\n    });    });\n    // Create tooltip\n    if (!tooltipRef.current) {\n      tooltipRef.current = document.createElement(\"div\");\n      tooltipRef.current.style.position = \"absolute\";\n      tooltipRef.current.style.zIndex = \"1000\";\n      tooltipRef.current.style.background = \"rgba(0, 0, 0, 0.9)\";\n      tooltipRef.current.style.color = \"white\";\n      tooltipRef.current.style.padding = \"12px 16px\";\n      tooltipRef.current.style.borderRadius = \"8px\";\n      tooltipRef.current.style.fontSize = \"14px\";\n      tooltipRef.current.style.pointerEvents = \"none\";\n      tooltipRef.current.style.maxWidth = \"300px\";\n      tooltipRef.current.style.boxShadow = \"0 4px 20px rgba(0, 0, 0, 0.3)\";\n      tooltipRef.current.style.opacity = \"0\";\n      tooltipRef.current.style.transition = \"opacity 0.2s ease\";\n      document.body.appendChild(tooltipRef.current);\n    }\n\n    cyInstance.current.on(\"mouseover\", \"node\", (evt) => {\n      const node = evt.target;\n      const data = node.data();\n      \n      if (tooltipRef.current) {\n        const shortTitle = data.title.length > 50 ? data.title.substring(0, 50) + \"...\" : data.title;\n        \n        tooltipRef.current.innerHTML = \n          \"<div style='font-weight: 600; color: #FFD700; margin-bottom: 8px;'>\" + shortTitle + \"</div>\" +\n          \"<div style='margin-bottom: 4px;'><strong>Year:</strong> \" + data.year + \"</div>\" +\n          \"<div style='margin-bottom: 4px;'><strong>Topic:</strong> \" + (data.cluster || \"Unknown\") + \"</div>\" +\n          \"<div><strong>Confidence:</strong> \" + data.confidence + \"%</div>\";\n        \n        const pos = node.renderedPosition();\n        const container = cyRef.current?.getBoundingClientRect();\n        \n        if (container) {\n          tooltipRef.current.style.left = (container.left + pos.x + 25) + \"px\";\n          tooltipRef.current.style.top = (container.top + pos.y - 30) + \"px\";\n          tooltipRef.current.style.opacity = \"1\";\n        }\n      }\n      \n      onNodeHover(evt.target.id());\n    });\n    cyInstance.current.on(\"mouseout\", \"node\", () => {\n      if (tooltipRef.current) {\n        tooltipRef.current.style.opacity = \"0\";\n      }\n      onNodeHover(null);\n    });\n    return () => {\n      if (cyInstance.current) {\n        cyInstance.current.destroy();\n      }\n      if (tooltipRef.current && document.body.contains(tooltipRef.current)) {\n        document.body.removeChild(tooltipRef.current);\n        tooltipRef.current = null;\n      }\n    };  }, [nodes, edges, onNodeSelect, onNodeHover]);\n\n  return (\n    <div\n      ref={cyRef}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        border: \"1px solid #e0e0e0\",\n        borderRadius: \"12px\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"grab\",\n        overflow: \"hidden\",\n        boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.1)\",\n      }}\n    />\n  );\n};\n\nexport default GraphVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}