{"ast":null,"code":"var _jsxFileName = \"/Users/arjuncaputo/hackmit25/frontend/src/components/Graph/GraphVisualization.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport cytoscape from \"cytoscape\";\nimport fcose from \"cytoscape-fcose\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ncytoscape.use(fcose);\nconst GraphVisualization = ({\n  nodes,\n  edges,\n  onNodeSelect,\n  onNodeHover\n}) => {\n  _s();\n  const cyRef = useRef(null);\n  const cyInstance = useRef(null);\n  const tooltipRef = useRef(null);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  // Red gradient colors for relatedness (dark to light)\n  const relatednessColors = [\"#8B0000\",\n  // Dark red (distance 0 - selected paper)\n  \"#B22222\",\n  // Fire brick (distance 1)\n  \"#DC143C\",\n  // Crimson (distance 2)\n  \"#FF6347\",\n  // Tomato (distance 3)\n  \"#FF7F7F\",\n  // Light coral (distance 4)\n  \"#FFB6C1\" // Light pink (distance 5+)\n  ];\n  const clusterColors = {\n    \"NLP\": \"#4A90E2\",\n    \"Computer Vision\": \"#7CB342\",\n    \"Machine Learning\": \"#FB8C00\",\n    \"Default\": \"#666666\"\n  };\n  const getNodeColor = (cluster, distance) => {\n    // If we have a selected node, use relatedness colors\n    if (selectedNodeId && distance !== undefined) {\n      const colorIndex = Math.min(distance, relatednessColors.length - 1);\n      return relatednessColors[colorIndex];\n    }\n\n    // Otherwise use cluster colors\n    return cluster ? clusterColors[cluster] || clusterColors[\"Default\"] : clusterColors[\"Default\"];\n  };\n\n  // Calculate shortest path distances from selected node\n  const calculateDistances = selectedId => {\n    if (!cyInstance.current) return new Map();\n    const distances = new Map();\n    const visited = new Set();\n    const queue = [{\n      nodeId: selectedId,\n      distance: 0\n    }];\n    distances.set(selectedId, 0);\n    while (queue.length > 0) {\n      const {\n        nodeId,\n        distance\n      } = queue.shift();\n      if (visited.has(nodeId)) continue;\n      visited.add(nodeId);\n\n      // Find connected nodes\n      const node = cyInstance.current.getElementById(nodeId);\n      const connectedEdges = node.connectedEdges();\n      connectedEdges.forEach(edge => {\n        const connectedNode = edge.otherNode(node);\n        const connectedId = connectedNode.id();\n        if (!distances.has(connectedId) || distances.get(connectedId) > distance + 1) {\n          distances.set(connectedId, distance + 1);\n          queue.push({\n            nodeId: connectedId,\n            distance: distance + 1\n          });\n        }\n      });\n    }\n    return distances;\n  };\n  useEffect(() => {\n    if (!cyRef.current) return;\n    cyInstance.current = cytoscape({\n      container: cyRef.current,\n      elements: [...nodes.map(node => ({\n        data: {\n          id: node.id,\n          title: node.data.title,\n          year: node.data.year,\n          cluster: node.data.cluster,\n          confidence: node.data.confidence\n        }\n      })), ...edges.map(edge => ({\n        data: {\n          id: edge.id,\n          source: edge.source,\n          target: edge.target,\n          type: edge.type\n        }\n      }))],\n      style: [{\n        selector: \"node\",\n        style: {\n          \"background-color\": ele => getNodeColor(ele.data(\"cluster\")),\n          \"border-color\": \"#fff\",\n          \"border-width\": 2,\n          label: \"data(year)\",\n          \"text-valign\": \"center\",\n          \"text-halign\": \"center\",\n          width: 60,\n          height: 60,\n          \"font-size\": \"12px\",\n          \"font-weight\": 600,\n          color: \"white\"\n        }\n      }, {\n        selector: \"node:hover\",\n        style: {\n          \"border-width\": 3,\n          \"border-color\": \"#FFD700\"\n        }\n      }, {\n        selector: \"edge[type = \\\"citation\\\"]\",\n        style: {\n          \"line-color\": \"#888\",\n          \"target-arrow-color\": \"#888\",\n          \"target-arrow-shape\": \"triangle\",\n          width: 2\n        }\n      }, {\n        selector: \"edge[type = \\\"beats\\\"]\",\n        style: {\n          \"line-color\": \"#E74C3C\",\n          \"target-arrow-color\": \"#E74C3C\",\n          \"target-arrow-shape\": \"triangle\",\n          width: 3,\n          \"line-style\": \"dashed\"\n        }\n      }],\n      layout: {\n        name: \"cose\",\n        animate: true,\n        animationDuration: 1000,\n        fit: true,\n        padding: 50\n      },\n      minZoom: 0.3,\n      maxZoom: 3,\n      userPanningEnabled: true,\n      userZoomingEnabled: true\n    });\n    cyInstance.current.on(\"tap\", \"node\", evt => {\n      var _cyInstance$current, _cyInstance$current2;\n      const nodeId = evt.target.id();\n      setSelectedNodeId(nodeId);\n\n      // Calculate distances and update node colors\n      const distances = calculateDistances(nodeId);\n\n      // Update all node colors based on relatedness\n      (_cyInstance$current = cyInstance.current) === null || _cyInstance$current === void 0 ? void 0 : _cyInstance$current.nodes().forEach(node => {\n        var _distances$get;\n        const id = node.id();\n        const distance = (_distances$get = distances.get(id)) !== null && _distances$get !== void 0 ? _distances$get : 999;\n        const newColor = getNodeColor(node.data(\"cluster\"), distance);\n        node.style(\"background-color\", newColor);\n      });\n      onNodeSelect(nodeId);\n\n      // Reset colors when clicking background\n      (_cyInstance$current2 = cyInstance.current) === null || _cyInstance$current2 === void 0 ? void 0 : _cyInstance$current2.on(\"tap\", evt => {\n        // Only reset if clicking on background (not on a node)\n        if (evt.target === cyInstance.current) {\n          var _cyInstance$current3;\n          setSelectedNodeId(null);\n\n          // Reset all node colors to cluster colors\n          (_cyInstance$current3 = cyInstance.current) === null || _cyInstance$current3 === void 0 ? void 0 : _cyInstance$current3.nodes().forEach(node => {\n            const originalColor = getNodeColor(node.data(\"cluster\"));\n            node.style(\"background-color\", originalColor);\n          });\n        }\n      });\n    });\n    // Create tooltip\n    if (!tooltipRef.current) {\n      tooltipRef.current = document.createElement(\"div\");\n      tooltipRef.current.style.position = \"absolute\";\n      tooltipRef.current.style.zIndex = \"1000\";\n      tooltipRef.current.style.background = \"rgba(0, 0, 0, 0.9)\";\n      tooltipRef.current.style.color = \"white\";\n      tooltipRef.current.style.padding = \"12px 16px\";\n      tooltipRef.current.style.borderRadius = \"8px\";\n      tooltipRef.current.style.fontSize = \"14px\";\n      tooltipRef.current.style.pointerEvents = \"none\";\n      tooltipRef.current.style.maxWidth = \"300px\";\n      tooltipRef.current.style.boxShadow = \"0 4px 20px rgba(0, 0, 0, 0.3)\";\n      tooltipRef.current.style.opacity = \"0\";\n      tooltipRef.current.style.transition = \"opacity 0.2s ease\";\n      document.body.appendChild(tooltipRef.current);\n    }\n    cyInstance.current.on(\"mouseover\", \"node\", evt => {\n      const node = evt.target;\n      const data = node.data();\n      if (tooltipRef.current && cyInstance.current) {\n        const shortTitle = data.title.length > 50 ? data.title.substring(0, 50) + \"...\" : data.title;\n        tooltipRef.current.innerHTML = \"<div style='font-weight: 600; color: #FFD700; margin-bottom: 8px;'>\" + shortTitle + \"</div>\" + \"<div style='margin-bottom: 4px;'><strong>Year:</strong> \" + data.year + \"</div>\" + \"<div style='margin-bottom: 4px;'><strong>Topic:</strong> \" + (data.cluster || \"Unknown\") + \"</div>\" + \"<div><strong>Confidence:</strong> \" + data.confidence + \"%</div>\";\n        try {\n          var _cyRef$current;\n          // Check if the renderer is properly initialized before getting position\n          if (!cyInstance.current.renderer() || cyInstance.current.renderer().isHeadless()) {\n            return;\n          }\n          const pos = node.renderedPosition();\n          const container = (_cyRef$current = cyRef.current) === null || _cyRef$current === void 0 ? void 0 : _cyRef$current.getBoundingClientRect();\n          if (container && pos) {\n            tooltipRef.current.style.left = container.left + pos.x + 25 + \"px\";\n            tooltipRef.current.style.top = container.top + pos.y - 30 + \"px\";\n            tooltipRef.current.style.opacity = \"1\";\n          }\n        } catch (error) {\n          // Silently handle renderer errors to prevent crashes\n          console.warn(\"Tooltip positioning error:\", error);\n        }\n      }\n      onNodeHover(evt.target.id());\n    });\n    cyInstance.current.on(\"mouseout\", \"node\", () => {\n      if (tooltipRef.current) {\n        tooltipRef.current.style.opacity = \"0\";\n      }\n      onNodeHover(null);\n    });\n    return () => {\n      if (cyInstance.current) {\n        cyInstance.current.destroy();\n      }\n      if (tooltipRef.current && document.body.contains(tooltipRef.current)) {\n        document.body.removeChild(tooltipRef.current);\n        tooltipRef.current = null;\n      }\n    };\n  }, [nodes, edges, onNodeSelect, onNodeHover]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cyRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      border: \"1px solid #e0e0e0\",\n      borderRadius: \"12px\",\n      backgroundColor: \"#fafafa\",\n      cursor: \"grab\",\n      overflow: \"hidden\",\n      boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.1)\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"pYZIX2JjFPuc3nIiRd0dVnDsw9Q=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","cytoscape","fcose","jsxDEV","_jsxDEV","use","GraphVisualization","nodes","edges","onNodeSelect","onNodeHover","_s","cyRef","cyInstance","tooltipRef","selectedNodeId","setSelectedNodeId","relatednessColors","clusterColors","getNodeColor","cluster","distance","undefined","colorIndex","Math","min","length","calculateDistances","selectedId","current","Map","distances","visited","Set","queue","nodeId","set","shift","has","add","node","getElementById","connectedEdges","forEach","edge","connectedNode","otherNode","connectedId","id","get","push","container","elements","map","data","title","year","confidence","source","target","type","style","selector","ele","label","width","height","color","layout","name","animate","animationDuration","fit","padding","minZoom","maxZoom","userPanningEnabled","userZoomingEnabled","on","evt","_cyInstance$current","_cyInstance$current2","_distances$get","newColor","_cyInstance$current3","originalColor","document","createElement","position","zIndex","background","borderRadius","fontSize","pointerEvents","maxWidth","boxShadow","opacity","transition","body","appendChild","shortTitle","substring","innerHTML","_cyRef$current","renderer","isHeadless","pos","renderedPosition","getBoundingClientRect","left","x","top","y","error","console","warn","destroy","contains","removeChild","ref","border","backgroundColor","cursor","overflow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/arjuncaputo/hackmit25/frontend/src/components/Graph/GraphVisualization.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport cytoscape from \"cytoscape\";\nimport fcose from \"cytoscape-fcose\";\nimport { GraphNode, GraphEdge } from \"../../types\";\n\ncytoscape.use(fcose);\n\ninterface GraphVisualizationProps {\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n  onNodeSelect: (nodeId: string) => void;\n  onNodeHover: (nodeId: string | null) => void;\n}\n\nconst GraphVisualization: React.FC<GraphVisualizationProps> = ({\n  nodes,\n  edges,\n  onNodeSelect,\n  onNodeHover,\n}) => {\n  const cyRef = useRef<HTMLDivElement>(null);\n  const cyInstance = useRef<cytoscape.Core | null>(null);\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\n  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);\n  // Red gradient colors for relatedness (dark to light)\n  const relatednessColors = [\n    \"#8B0000\", // Dark red (distance 0 - selected paper)\n    \"#B22222\", // Fire brick (distance 1)\n    \"#DC143C\", // Crimson (distance 2)\n    \"#FF6347\", // Tomato (distance 3)\n    \"#FF7F7F\", // Light coral (distance 4)\n    \"#FFB6C1\", // Light pink (distance 5+)\n  ];\n  const clusterColors: Record<string, string> = {\n    \"NLP\": \"#4A90E2\",\n    \"Computer Vision\": \"#7CB342\",\n    \"Machine Learning\": \"#FB8C00\", \n    \"Default\": \"#666666\",\n  };\n\n  const getNodeColor = (cluster?: string, distance?: number) => {\n    // If we have a selected node, use relatedness colors\n    if (selectedNodeId && distance !== undefined) {\n      const colorIndex = Math.min(distance, relatednessColors.length - 1);\n      return relatednessColors[colorIndex];\n    }\n    \n    // Otherwise use cluster colors\n    return cluster ? clusterColors[cluster] || clusterColors[\"Default\"] : clusterColors[\"Default\"];\n  };\n\n  // Calculate shortest path distances from selected node\n  const calculateDistances = (selectedId: string) => {\n    if (!cyInstance.current) return new Map();\n    \n    const distances = new Map<string, number>();\n    const visited = new Set<string>();\n    const queue = [{ nodeId: selectedId, distance: 0 }];\n    \n    distances.set(selectedId, 0);\n    \n    while (queue.length > 0) {\n      const { nodeId, distance } = queue.shift()!;\n      \n      if (visited.has(nodeId)) continue;\n      visited.add(nodeId);\n      \n      // Find connected nodes\n      const node = cyInstance.current.getElementById(nodeId);\n      const connectedEdges = node.connectedEdges();\n      \n      connectedEdges.forEach((edge: any) => {\n        const connectedNode = edge.otherNode(node);\n        const connectedId = connectedNode.id();\n        \n        if (!distances.has(connectedId) || distances.get(connectedId)! > distance + 1) {\n          distances.set(connectedId, distance + 1);\n          queue.push({ nodeId: connectedId, distance: distance + 1 });\n        }\n      });\n    }\n    \n    return distances;\n  };\n  useEffect(() => {\n    if (!cyRef.current) return;\n\n    cyInstance.current = cytoscape({\n      container: cyRef.current,\n      elements: [\n        ...nodes.map(node => ({\n          data: {\n            id: node.id,\n            title: node.data.title,\n            year: node.data.year,\n            cluster: node.data.cluster,\n            confidence: node.data.confidence,\n          },\n        })),\n        ...edges.map(edge => ({\n          data: {\n            id: edge.id,\n            source: edge.source,\n            target: edge.target,\n            type: edge.type,\n          },\n        })),\n      ],\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            \"background-color\": (ele: any) => getNodeColor(ele.data(\"cluster\")),\n            \"border-color\": \"#fff\",\n            \"border-width\": 2,\n            label: \"data(year)\",\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            width: 60,\n            height: 60,\n            \"font-size\": \"12px\",\n            \"font-weight\": 600,\n            color: \"white\",\n          },\n        },\n        {\n          selector: \"node:hover\",\n          style: {\n            \"border-width\": 3,\n            \"border-color\": \"#FFD700\",\n          },\n        },\n        {\n          selector: \"edge[type = \\\"citation\\\"]\",\n          style: {\n            \"line-color\": \"#888\",\n            \"target-arrow-color\": \"#888\",\n            \"target-arrow-shape\": \"triangle\",\n            width: 2,\n          },\n        },\n        {\n          selector: \"edge[type = \\\"beats\\\"]\",\n          style: {\n            \"line-color\": \"#E74C3C\",\n            \"target-arrow-color\": \"#E74C3C\",\n            \"target-arrow-shape\": \"triangle\",\n            width: 3,\n            \"line-style\": \"dashed\",\n          },\n        },\n      ],\n      layout: {\n        name: \"cose\" as const,\n        animate: true,\n        animationDuration: 1000,\n        fit: true,\n        padding: 50,\n      },\n      minZoom: 0.3,\n      maxZoom: 3,\n      userPanningEnabled: true,\n      userZoomingEnabled: true,\n    });\n\n    cyInstance.current.on(\"tap\", \"node\", (evt) => {\n      const nodeId = evt.target.id();\n      setSelectedNodeId(nodeId);\n      \n      // Calculate distances and update node colors\n      const distances = calculateDistances(nodeId);\n      \n      // Update all node colors based on relatedness\n      cyInstance.current?.nodes().forEach((node: any) => {\n        const id = node.id();\n        const distance = distances.get(id) ?? 999;\n        const newColor = getNodeColor(node.data(\"cluster\"), distance);\n        node.style(\"background-color\", newColor);\n      });\n      \n      onNodeSelect(nodeId);\n\n    // Reset colors when clicking background\n    cyInstance.current?.on(\"tap\", (evt) => {\n      // Only reset if clicking on background (not on a node)\n      if (evt.target === cyInstance.current) {\n        setSelectedNodeId(null);\n        \n        // Reset all node colors to cluster colors\n        cyInstance.current?.nodes().forEach((node: any) => {\n          const originalColor = getNodeColor(node.data(\"cluster\"));\n          node.style(\"background-color\", originalColor);\n        });\n      }\n    });    });\n    // Create tooltip\n    if (!tooltipRef.current) {\n      tooltipRef.current = document.createElement(\"div\");\n      tooltipRef.current.style.position = \"absolute\";\n      tooltipRef.current.style.zIndex = \"1000\";\n      tooltipRef.current.style.background = \"rgba(0, 0, 0, 0.9)\";\n      tooltipRef.current.style.color = \"white\";\n      tooltipRef.current.style.padding = \"12px 16px\";\n      tooltipRef.current.style.borderRadius = \"8px\";\n      tooltipRef.current.style.fontSize = \"14px\";\n      tooltipRef.current.style.pointerEvents = \"none\";\n      tooltipRef.current.style.maxWidth = \"300px\";\n      tooltipRef.current.style.boxShadow = \"0 4px 20px rgba(0, 0, 0, 0.3)\";\n      tooltipRef.current.style.opacity = \"0\";\n      tooltipRef.current.style.transition = \"opacity 0.2s ease\";\n      document.body.appendChild(tooltipRef.current);\n    }\n\n    cyInstance.current.on(\"mouseover\", \"node\", (evt) => {\n      const node = evt.target;\n      const data = node.data();\n      \n      if (tooltipRef.current && cyInstance.current) {\n        const shortTitle = data.title.length > 50 ? data.title.substring(0, 50) + \"...\" : data.title;\n        \n        tooltipRef.current.innerHTML = \n          \"<div style='font-weight: 600; color: #FFD700; margin-bottom: 8px;'>\" + shortTitle + \"</div>\" +\n          \"<div style='margin-bottom: 4px;'><strong>Year:</strong> \" + data.year + \"</div>\" +\n          \"<div style='margin-bottom: 4px;'><strong>Topic:</strong> \" + (data.cluster || \"Unknown\") + \"</div>\" +\n          \"<div><strong>Confidence:</strong> \" + data.confidence + \"%</div>\";\n        \n        try {\n          // Check if the renderer is properly initialized before getting position\n          if (!cyInstance.current.renderer() || cyInstance.current.renderer().isHeadless()) {\n            return;\n          }\n          \n          const pos = node.renderedPosition();\n          const container = cyRef.current?.getBoundingClientRect();\n          \n          if (container && pos) {\n            tooltipRef.current.style.left = (container.left + pos.x + 25) + \"px\";\n            tooltipRef.current.style.top = (container.top + pos.y - 30) + \"px\";\n            tooltipRef.current.style.opacity = \"1\";\n          }\n        } catch (error) {\n          // Silently handle renderer errors to prevent crashes\n          console.warn(\"Tooltip positioning error:\", error);\n        }\n      }\n      \n      onNodeHover(evt.target.id());\n    });\n    cyInstance.current.on(\"mouseout\", \"node\", () => {\n      if (tooltipRef.current) {\n        tooltipRef.current.style.opacity = \"0\";\n      }\n      onNodeHover(null);\n    });\n    return () => {\n      if (cyInstance.current) {\n        cyInstance.current.destroy();\n      }\n      if (tooltipRef.current && document.body.contains(tooltipRef.current)) {\n        document.body.removeChild(tooltipRef.current);\n        tooltipRef.current = null;\n      }\n    };  }, [nodes, edges, onNodeSelect, onNodeHover]);\n\n  return (\n    <div\n      ref={cyRef}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        border: \"1px solid #e0e0e0\",\n        borderRadius: \"12px\",\n        backgroundColor: \"#fafafa\",\n        cursor: \"grab\",\n        overflow: \"hidden\",\n        boxShadow: \"0 4px 12px rgba(0, 0, 0, 0.1)\",\n      }}\n    />\n  );\n};\n\nexport default GraphVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}